block ::= { statement }

statement ::= [ "int" ], ident, assign-op, expression, ";"
            | "if", "(", condition, ")" "{", block, "}"
            | "for", "(", statement, ";", condition, ";", expression, ")", "{", block , "}"

loop-step = ident, assign-op, expression

condition ::= expression, cmp-op, expression

expression ::= factor, { unary-op, factor }
             | atom-op, factor

factor ::= ident
         | literal
         | "(", expression, ")"

cmp-op ::= "==" | "<" | ">" | "<=" | ">=" | "!="

assign-op ::= "=" | "+=" | "-=" | "*=" | "/="

unary-op ::= "+" | "-" | "*" | "/"

atom-op ::= "!"

ident ::= letter, { letter | digit }

literal ::= digit, { digit }

